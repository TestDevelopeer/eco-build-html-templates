{"version":3,"sources":["@core/components/card-actions/index.js","views/question/edit/questionEditForm.js","views/question/edit/questionEditComponent.js","views/question/edit/questionEditComponentContainer.js","@core/components/avatar/index.js","@core/components/app-collapse/index.js","views/question/edit/questionEditForm.module.css"],"names":["CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","callBack","useState","reload","setReload","collapse","setCollapse","visibility","Icons","ChevronDown","remove","X","RotateCw","callAction","action","removeReload","useEffect","CollapseWrapper","includes","Collapse","Fragment","BlockUiWrapper","BlockUi","blocking","className","loader","Spinner","color","Card","classnames","CardHeader","CardTitle","tag","Array","isArray","map","i","Tag","length","size","onClick","renderIcons","isOpen","QuestionEditFormContainer","reduxForm","form","answers","item","key","answer_text","animationIn","animationOut","isVisible","Row","s","animate","Col","md","FormGroup","Label","for","answer_id","onChange","e","changeAnswerText","value","type","placeholder","name","id","CustomInput","inline","checked","answer_true","changeIsTrue","Button","Ripple","deleteAnswer","outline","sm","data","questionAssets","content","question","question_type","index","deleteAsset","CardImg","top","src","configApi","SERVER_URI","path","question_id","alt","url","width","height","volume","controls","onSubmit","handleSubmit","changeQuestionText","question_text","theme","selectThemeColors","classNamePrefix","typeOptions","typeKey","options","setType","addAnswer","uppy","block","QuestionEditComponent","CardBody","questionsOptions","currQuestion","deleteQuestion","defaultType","count","label","SuccessProgressToast","icon","role","aria-label","connect","state","questions","getQuestions","getQuestionInfo","changeAnswer","changeQuestion","changeAssets","saveQuestion","getNewAssets","uploadassets","answersObj","assets","Uppy","autoProceed","restrictions","maxNumberOfFiles","allowedFileTypes","on","file","fileInfo","cancelAll","toast","success","position","POSITION","TOP_CENTER","newAnswer","answer_question_id","answerKey","elem","target","asset","splice","Avatar","forwardRef","ref","imgClassName","initials","badgeUp","badgeColor","badgeText","img","imgHeight","imgWidth","status","contentStyles","rest","undefined","style","str","results","split","forEach","push","join","getInitials","pill","defaultProps","AppCollapse","accordion","active","toggle","titleKey","contentKey","openCollapse","setOpenCollapse","handleCollapseToggle","arr","indexOf","collapsed","onMouseEnter","module","exports"],"mappings":"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","file":"static/js/13.3480f7bd.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport BlockUi from 'react-block-ui'\nimport { ChevronDown, RotateCw, X } from 'react-feather'\nimport { Card, CardHeader, CardTitle, Collapse, Spinner } from 'reactstrap'\n\n// ** Styles\nimport 'react-block-ui/style.css'\n\nconst CardActions = props => {\n  // ** Props\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload, callBack } = props\n\n  // ** States\n  const [reload, setReload] = useState(false)\n  const [collapse, setCollapse] = useState(true)\n  const [visibility, setVisibility] = useState(true)\n\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }\n\n  // ** Action to call\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse)\n      case 'remove': {\n        return callBack()\n      }\n      case 'reload':\n        return setReload(true)\n      default:\n    }\n  }\n\n  // ** Renders card actions\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action]\n        return (\n          <Tag\n            key={i}\n            className={classnames('cursor-pointer', {\n              'mr-50': i < actions.length - 1\n            })}\n            size={15}\n            onClick={() => callAction(action)}\n          />\n        )\n      })\n    } else {\n      const Tag = Icons[actions]\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\n    }\n  }\n\n  // ** Ends reload\n  const removeReload = () => {\n    setReload(false)\n  }\n\n  // ** If user passes endReload function call it.\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload)\n    }\n  })\n\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\n\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? BlockUi : Fragment\n\n  return (\n    <BlockUiWrapper\n      /*eslint-disable */\n      {...(actions === 'reload' || actions.includes('reload')\n        ? {\n            blocking: reload,\n            className: 'reload-wrapper',\n            loader: <Spinner color='primary' className='reload-spinner' />\n          }\n        : {})}\n      /*eslint-enable */\n    >\n      <Card\n        className={classnames('card-action', {\n          'd-none': !visibility\n        })}\n      >\n        <CardHeader>\n          <CardTitle tag='h4'>{title}</CardTitle>\n          <div className='action-icons'>{renderIcons()}</div>\n        </CardHeader>\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\n          {children}\n        </CollapseWrapper>\n      </Card>\n    </BlockUiWrapper>\n  )\n}\n\nexport default CardActions\n\n// ** PropTypes\nCardActions.propTypes = {\n  title: PropTypes.string.isRequired,\n  collapseIcon: PropTypes.string,\n  removeIcon: PropTypes.string,\n  reloadIcon: PropTypes.string,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\n    ) {\n      return new Error('Please provide a function to end reload!')\n    }\n  }\n}\n","import {reduxForm} from \"redux-form\";\nimport React from \"react\";\nimport {Button, CardImg, Col, CustomInput, FormGroup, Label, Row} from \"reactstrap\";\nimport CardAction from '@components/card-actions'\nimport {selectThemeColors} from '@utils';\nimport Select from \"react-select\";\nimport {Plus, X} from \"react-feather\";\nimport configApi from \"../../../api/config\";\nimport ReactPlayer from \"react-player\";\nimport {DragDrop} from \"@uppy/react\";\nimport 'uppy/dist/uppy.css'\nimport '@uppy/status-bar/dist/style.css'\nimport '@styles/react/libs/file-uploader/file-uploader.scss';\nimport AppCollapse from \"../../../@core/components/app-collapse\";\nimport s from './questionEditForm.module.css';\nimport {Animated} from \"react-animated-css\";\n\nconst QuestionEditForm = (props) => {\n    const answers = props.answers.map((item, key) => (\n        <>\n            {item.answer_text !== 'delete' &&\n            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\" isVisible={true}>\n                <Row className={`justify-content-between align-items-center ${s.animate}`}>\n                    <Col md={8}>\n                        <FormGroup>\n                            <Label for={`answer-${item.answer_id}`}>Текст ответа</Label>\n                            <input\n                                onChange={e => props.changeAnswerText(key, e)}\n                                value={item.answer_text}\n                                type=\"text\"\n                                placeholder='Введите ответ'\n                                name={`answer`}\n                                id={`answer-${item.answer_id}`}\n                                className='input-group-merge is-touched is-dirty av-valid form-control'\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col md={2}>\n                        <CustomInput\n                            className={'custom-control-success'}\n                            type='radio'\n                            id={`answer-radio-${item.answer_id}`}\n                            name='customRadio'\n                            inline\n                            checked={item.answer_true === '1'}\n                            onChange={() => props.changeIsTrue(key)}\n                        />\n                    </Col>\n                    <Col md={2}>\n                        <Button.Ripple color='danger' className='text-nowrap px-1' onClick={() => props.deleteAnswer(key)} outline>\n                            <X size={14} className='mr-50'/>\n                            <span>Удалить</span>\n                        </Button.Ripple>\n                    </Col>\n                    <Col sm={12}>\n                        <hr/>\n                    </Col>\n                </Row>\n            </Animated>\n            }\n        </>\n    ));\n\n    const questionAssets = () => {\n        return <>\n            {props.questionAssets &&\n            <Row>\n                {props.question.question_type === 'image' ?\n                    props.questionAssets.data.map((item, index) => (\n                        <Col md={2}>\n                            <CardAction title='Удалить' actions='remove' callBack={() => props.deleteAsset(item, index)}>\n                                <CardImg top\n                                         src={`${configApi.SERVER_URI}${props.questionAssets.path}${props.question.question_id}/${props.question.question_type}/${item}`}\n                                         alt='question image'/>\n                            </CardAction>\n                        </Col>\n                    ))\n                    : props.question.question_type === 'video' &&\n                    props.questionAssets.data.map((item, index) => (\n                        <Col md={3}>\n                            <CardAction title='Удалить' actions='remove' callBack={() => props.deleteAsset(item, index)}>\n                                <ReactPlayer\n                                    url={`${configApi.SERVER_URI}${props.questionAssets.path}${props.question.question_id}/${props.question.question_type}/${item}`}\n                                    className={`react-player-video`}\n                                    width='100%'\n                                    height='auto'\n                                    volume={0.5}\n                                    controls={true}\n                                />\n                            </CardAction>\n                        </Col>\n                    ))\n                }\n            </Row>}\n        </>\n    }\n\n    const data = [\n        {\n            title: `Показать медиа файлы (${props.questionAssets.data.length})`,\n            content: questionAssets()\n        }\n    ];\n\n    return (\n        <form className='question-edit-form mt-2 animate__fadeIn' onSubmit={props.handleSubmit}>\n            <Row>\n                <Col md={6}>\n                    <FormGroup>\n                        <Label className='form-label' for={'question'}>\n                            Текст вопроса\n                        </Label>\n                        <input\n                            onChange={e => props.changeQuestionText(e)}\n                            value={props.question.question_text}\n                            id={'question'}\n                            name={'question'}\n                            placeholder='Введите вопрос'\n                            type='text'\n                            className='input-group-merge is-touched is-dirty av-valid form-control'\n                        />\n                    </FormGroup>\n                </Col>\n                <Col md={6}>\n                    <FormGroup>\n                        <Label className='form-label' for={'type'}>\n                            Выберите тип вопроса, текущий тип: <strong> {props.question.question_type}</strong>\n                        </Label>\n                        <Select\n                            id={'type'}\n                            theme={selectThemeColors}\n                            className='react-select'\n                            classNamePrefix='select'\n                            name='clear'\n                            value={props.typeOptions[props.typeKey]}\n                            options={props.typeOptions}\n                            onChange={props.setType}\n                        />\n                    </FormGroup>\n                </Col>\n                <Col sm={12}>\n                    <hr/>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={12}>\n                    {props.question.question_type !== 'text' && <>\n                        <AppCollapse type='margin' className='mb-1' data={data}/>\n                        <Col sm={12}>\n                            <hr/>\n                        </Col>\n                    </>}\n                </Col>\n\n                <Col className={s.animate} md={props.question.question_type === 'text' ? 12 : 6}>\n                    {answers}\n                    <Button className='btn-icon' color='primary' onClick={props.addAnswer}>\n                        <Plus size={14}/>\n                        <span className='align-middle ml-25'>Добавить еще</span>\n                    </Button>\n                </Col>\n                <Col className={s.animate} md={props.question.question_type !== 'text' ? 6 : 0}>\n                    {props.question.question_type !== 'text' &&\n                    <Animated animationIn=\"bounceInRight\" animationOut=\"fadeOut\" isVisible={true}>\n                        <DragDrop uppy={props.uppy}/>\n                    </Animated>\n                    }\n                    <div className=\"UppyProgressBar\"/>\n                </Col>\n            </Row>\n            <Row className='d-flex justify-content-center mt-2'>\n                <Col md={6}>\n                    <Button.Ripple color='success' block outline>\n                        Сохранить\n                    </Button.Ripple>\n                </Col>\n            </Row>\n        </form>\n    );\n}\n\nconst QuestionEditFormContainer = reduxForm({form: 'questionEdit'})(QuestionEditForm);\n\nexport default QuestionEditFormContainer;","import {Button, Card, CardBody, CardHeader, CardTitle, Col, Row} from \"reactstrap\"\nimport Select from \"react-select\"\nimport React from \"react\"\nimport {selectThemeColors} from '@utils'\nimport QuestionEditFormContainer from \"./questionEditForm\";\nimport {X} from \"react-feather\";\n\nconst QuestionEditComponent = (props) => {\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle tag='h4'>Выберите вопрос</CardTitle>\n            </CardHeader>\n            <CardBody>\n                <Row>\n                    <Col md={6}>\n                        <Select\n                            theme={selectThemeColors}\n                            className='react-select'\n                            classNamePrefix='select'\n                            name='clear'\n                            options={props.questionsOptions()}\n                            onChange={props.onChange}\n                        />\n                    </Col>\n                    {props.currQuestion &&\n                        <Col md={6}> \n                            <Button.Ripple color='danger' className='text-nowrap px-1' onClick={() => props.deleteQuestion(props.currQuestion)} outline>\n                                <X size={14} className='mr-50'/>\n                                <span>Удалить</span>\n                            </Button.Ripple>\n                        </Col>\n                    }\n                    <Col sm={12}>\n                        <hr/>\n                    </Col>\n                </Row>\n                {props.currQuestion &&\n                    <Row>\n                        <Col md={12}>\n                            <QuestionEditFormContainer\n                                questionAssets={props.questionAssets}\n                                typeOptions={props.typeOptions}\n                                defaultType={props.defaultType}\n                                setType={props.setType}\n                                onSubmit={props.onSubmit}\n                                question={props.currQuestion}\n                                answers={props.answers}\n                                count={props.count}\n                                addAnswer={props.addAnswer}\n                                deleteAnswer={props.deleteAnswer}\n                                changeAnswerText={props.changeAnswerText}\n                                changeQuestionText={props.changeQuestionText}\n                                changeIsTrue={props.changeIsTrue}\n                                deleteAsset={props.deleteAsset}\n                                uppy={props.uppy}\n                                typeKey={props.typeKey}\n                            />\n                        </Col>\n                    </Row>\n                }\n            </CardBody>\n        </Card>\n    )\n}\n\nexport default QuestionEditComponent","import React, {Fragment, useEffect} from 'react'\nimport QuestionEditComponent from \"./questionEditComponent\"\nimport {connect} from \"react-redux\";\nimport {\n    changeAnswer,\n    changeAssets,\n    changeQuestion,\n    getNewAssets,\n    getQuestionInfo,\n    getQuestions,\n    saveQuestion, uploadassets\n} from \"../../../redux/reducers/question-reducer\";\nimport Uppy from \"@uppy/core\";\nimport {Check} from \"react-feather\";\nimport {toast} from \"react-toastify\";\nimport Avatar from \"../../../@core/components/avatar\";\n\nconst typeOptions = [\n    {value: 'text', label: 'text'},\n    {value: 'image', label: 'image'},\n    {value: 'video', label: 'video'}\n];\n\nconst SuccessProgressToast = () => (\n    <Fragment>\n        <div className='toastify-header'>\n            <div className='title-wrapper'>\n                <Avatar size='sm' color='success' icon={<Check size={12}/>}/>\n                <h6 className='toast-title'>Получилось!</h6>\n            </div>\n            <small className='text-muted'>только что</small>\n        </div>\n        <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        Ваш вопрос успешно сохранен.\n      </span>\n        </div>\n    </Fragment>\n)\n\nconst questionEditComponentContainer = (props) => {\n    useEffect(() => {\n        props.getQuestions();\n    }, []);\n\n    const question = {...props.currQuestion};\n    const answersObj = [...props.answers];\n    const assets = props.questionAssets ? [...props.questionAssets.data] : [];\n\n    let uppy;\n    let typeKey;\n    if (props.currQuestion) {\n        uppy = new Uppy({\n            autoProceed: false,\n            restrictions: {maxNumberOfFiles: 3, allowedFileTypes: [`${props.currQuestion.question_type}/*`]}\n        });\n\n        uppy.on('file-added', (file) => {\n            const fileInfo = {\n                type: file.type.includes('video') ? 'video' : 'image',\n                question: props.currQuestion\n            }\n            props.uploadassets(file.data, fileInfo);\n        });\n        for (const key in typeOptions) {\n            if (typeOptions[key].value === props.currQuestion.question_type) {\n                typeKey = key;\n                break;\n            }\n        }\n    }\n\n    const onChange = (data) => {\n        props.getQuestionInfo(data.value);\n    }\n\n    const setType = (data) => {\n        uppy.cancelAll();\n        question.question_type = data.value;\n        props.changeQuestion(question);\n        props.getNewAssets(props.currQuestion, question.question_type);\n    }\n\n    const questionsOptions = () => {\n        if (props.questions) {\n            return props.questions.map(item => (\n                {value: item.question_id, label: item.question_text}\n            ));\n        }\n    }\n\n    const onSubmit = () => {\n        const notifySuccessProgress = () => toast.success(<SuccessProgressToast/>, {\n            position: toast.POSITION.TOP_CENTER\n        });\n        props.saveQuestion(props.currQuestion, props.answers, notifySuccessProgress);\n    }\n\n    const changeQuestionText = (elem) => {\n        question.question_text = elem.target.value;\n        props.changeQuestion(question);\n    }\n\n    const changeAnswerText = (answerKey, elem) => {\n        answersObj[answerKey].answer_text = elem.target.value\n        props.changeAnswer(answersObj);\n    }\n\n    const changeIsTrue = key => {\n        for (const index in answersObj) {\n            if (answersObj[index].answer_true === '1') {\n                answersObj[index].answer_true = '0';\n                break;\n            }\n        }\n        answersObj[key].answer_true = '1';\n        props.changeAnswer(answersObj);\n    }\n\n    const addAnswer = () => {\n        const newAnswer = [\n            ...props.answers, {\n                answer_id: null,\n                answer_question_id: props.currQuestion.question_id,\n                answer_text: '',\n                answer_true: '0'\n            }\n        ];\n        props.changeAnswer(newAnswer);\n    }\n\n    const deleteAnswer = (key) => {\n        answersObj[key].answer_text = 'delete';\n        props.changeAnswer(answersObj);\n    }\n\n    const deleteAsset = (asset, key) => {\n        assets.splice(key, 1);\n        props.changeAssets(asset, props.currQuestion, question.question_type);\n    }\n\n    return (\n        <QuestionEditComponent\n            currQuestion={props.currQuestion}\n            answers={props.answers}\n            questionAssets={props.questionAssets}\n            onChange={onChange}\n            questionsOptions={questionsOptions}\n            typeOptions={typeOptions}\n            setType={setType}\n            onSubmit={onSubmit}\n            addAnswer={addAnswer}\n            deleteAnswer={deleteAnswer}\n            changeAnswerText={changeAnswerText}\n            changeQuestionText={changeQuestionText}\n            changeIsTrue={changeIsTrue}\n            deleteAsset={deleteAsset}\n            uppy={uppy}\n            typeKey={typeKey}\n        />\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    questions: state.questions.questions,\n    currQuestion: state.questions.currQuestion,\n    answers: state.questions.answers,\n    questionAssets: state.questions.questionAssets\n});\n\nexport default connect(mapStateToProps, {\n    getQuestions,\n    getQuestionInfo,\n    changeAnswer,\n    changeQuestion,\n    changeAssets,\n    saveQuestion,\n    getNewAssets,\n    uploadassets\n})(questionEditComponentContainer);","// ** React Imports\nimport { forwardRef } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport { Badge } from 'reactstrap'\nimport classnames from 'classnames'\n\nconst Avatar = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    color,\n    className,\n    imgClassName,\n    initials,\n    size,\n    badgeUp,\n    content,\n    icon,\n    badgeColor,\n    badgeText,\n    img,\n    imgHeight,\n    imgWidth,\n    status,\n    tag: Tag,\n    contentStyles,\n    ...rest\n  } = props\n\n  // ** Function to extract initials from content\n  const getInitials = str => {\n    const results = []\n    const wordArray = str.split(' ')\n    wordArray.forEach(e => {\n      results.push(e[0])\n    })\n    return results.join('')\n  }\n\n  return (\n    <Tag\n      className={classnames('avatar', {\n        [className]: className,\n        [`bg-${color}`]: color,\n        [`avatar-${size}`]: size\n      })}\n      ref={ref}\n      {...rest}\n    >\n      {img === false || img === undefined ? (\n        <span\n          className={classnames('avatar-content', {\n            'position-relative': badgeUp\n          })}\n          style={contentStyles}\n        >\n          {initials ? getInitials(content) : content}\n\n          {icon ? icon : null}\n          {badgeUp ? (\n            <Badge color={badgeColor ? badgeColor : 'primary'} className='badge-sm badge-up' pill>\n              {badgeText ? badgeText : '0'}\n            </Badge>\n          ) : null}\n        </span>\n      ) : (\n        <img\n          className={classnames({\n            [imgClassName]: imgClassName\n          })}\n          src={img}\n          alt='avatarImg'\n          height={imgHeight && !size ? imgHeight : 32}\n          width={imgWidth && !size ? imgWidth : 32}\n        />\n      )}\n      {status ? (\n        <span\n          className={classnames({\n            [`avatar-status-${status}`]: status,\n            [`avatar-status-${size}`]: size\n          })}\n        ></span>\n      ) : null}\n    </Tag>\n  )\n})\n\nexport default Avatar\n\n// ** PropTypes\nAvatar.propTypes = {\n  imgClassName: Proptypes.string,\n  className: Proptypes.string,\n  src: Proptypes.string,\n  tag: Proptypes.oneOfType([Proptypes.func, Proptypes.string]),\n  badgeUp: Proptypes.bool,\n  content: Proptypes.string,\n  icon: Proptypes.node,\n  contentStyles: Proptypes.object,\n  badgeText: Proptypes.string,\n  imgHeight: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\n  imgWidth: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\n  size: Proptypes.oneOf(['sm', 'lg', 'xl']),\n  status: Proptypes.oneOf(['online', 'offline', 'away', 'busy']),\n  badgeColor: Proptypes.oneOf([\n    'primary',\n    'secondary',\n    'success',\n    'danger',\n    'info',\n    'warning',\n    'dark',\n    'light-primary',\n    'light-secondary',\n    'light-success',\n    'light-danger',\n    'light-info',\n    'light-warning',\n    'light-dark'\n  ]),\n  color: Proptypes.oneOf([\n    'primary',\n    'secondary',\n    'success',\n    'danger',\n    'info',\n    'warning',\n    'dark',\n    'light-primary',\n    'light-secondary',\n    'light-success',\n    'light-danger',\n    'light-info',\n    'light-warning',\n    'light-dark'\n  ]),\n  initials(props) {\n    if (props['initials'] && props['content'] === undefined) {\n      return new Error('content prop is required with initials prop.')\n    }\n    if (props['initials'] && typeof props['content'] !== 'string') {\n      return new Error('content prop must be a string.')\n    }\n    if (typeof props['initials'] !== 'boolean' && props['initials'] !== undefined) {\n      return new Error('initials must be a boolean!')\n    }\n  }\n}\n\n// ** Default Props\nAvatar.defaultProps = {\n  tag: 'div'\n}\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { ChevronUp } from 'react-feather'\nimport { Collapse, Card, CardHeader, CardBody, CardTitle } from 'reactstrap'\n\nconst AppCollapse = props => {\n  // ** Props\n  const { data, type, accordion, active, toggle, titleKey, contentKey, className } = props\n\n  /**\n   ** If accordion is true then return only one active index else return an Array\n   */\n  const defaultActive = () => {\n    if (accordion) {\n      return active\n    } else {\n      return [...active]\n    }\n  }\n\n  // ** State\n  const [openCollapse, setOpenCollapse] = useState(defaultActive())\n\n  // ** Function to handle Collapse Toggle\n  const handleCollapseToggle = id => {\n    if (accordion) {\n      if (id === openCollapse) {\n        setOpenCollapse(null)\n      } else {\n        setOpenCollapse(id)\n      }\n    } else {\n      const arr = openCollapse,\n        index = arr.indexOf(id)\n      if (arr.includes(id)) {\n        arr.splice(index, 1)\n        setOpenCollapse([...arr])\n      } else {\n        arr.push(id)\n        setOpenCollapse([...arr])\n      }\n    }\n  }\n\n  // ** Function to render collapse\n  const renderData = () => {\n    return data.map((item, index) => {\n      const title = titleKey ? item[titleKey] : item.title,\n        content = contentKey ? item[contentKey] : item.content\n\n      return (\n        <Card\n          className={classnames('app-collapse', {\n            [item.className]: item.className,\n            open: accordion ? openCollapse === index : openCollapse.includes(index) && type === 'shadow'\n          })}\n          key={index}\n        >\n          <CardHeader\n            className={classnames('align-items-center', {\n              collapsed: accordion ? openCollapse !== index : !openCollapse.includes(index)\n            })}\n            /*eslint-disable */\n            {...(toggle === 'hover'\n              ? {\n                  onMouseEnter: () => handleCollapseToggle(index)\n                }\n              : {\n                  onClick: () => handleCollapseToggle(index)\n                })}\n            /*eslint-enable */\n          >\n            <CardTitle className='collapse-title'>{title}</CardTitle>\n            <ChevronUp size={14} />\n          </CardHeader>\n          <Collapse isOpen={accordion ? openCollapse === index : openCollapse.includes(index)}>\n            <CardBody>{content}</CardBody>\n          </Collapse>\n        </Card>\n      )\n    })\n  }\n\n  return (\n    <div\n      className={classnames('collapse-icon', {\n        [className]: className,\n        'collapse-default': !type,\n        'collapse-shadow': type === 'shadow',\n        'collapse-border': type === 'border',\n        'collapse-margin': type === 'margin'\n      })}\n    >\n      {renderData()}\n    </div>\n  )\n}\n\nexport default AppCollapse\n\n// ** PropTypes\nAppCollapse.propTypes = {\n  data: Proptypes.array.isRequired,\n  accordion: Proptypes.bool,\n  type: Proptypes.oneOf(['shadow', 'border', 'margin']),\n  active: Proptypes.oneOfType([Proptypes.array, Proptypes.number]),\n  titleKey: Proptypes.string,\n  contentKey: Proptypes.string,\n  className: Proptypes.string\n}\n\n// ** Default Props\nAppCollapse.defaultProps = {\n  active: [],\n  toggle: 'click'\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"animate\":\"questionEditForm_animate__2QFMt\"};"],"sourceRoot":""}